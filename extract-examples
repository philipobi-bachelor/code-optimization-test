#!/usr/bin/env python3
import re
import logging
import sys
from arango import ArangoClient

logger = logging.getLogger(__name__)

def findMainBody(code:str) -> str:
    funcStart = code.find("int main")
    if funcStart < 0: return ""
    else: subs = code[funcStart:]
    
    bodyStart = funcStart
    bodyEnd = funcStart
    depth = 0
    for char in subs:
        if depth == 0: bodyStart += 1
        
        if char == "{":
            depth += 1
        elif char == "}":
            depth -= 1
            if depth == 0: break
        
        bodyEnd += 1
    
    return {
        "funcStart" : funcStart,
        "funcEnd" : bodyEnd + 1,
        "bodyStart" : bodyStart,
        "bodyEnd" : bodyEnd
    }

#file structure
"""
1.  **Title**: ...
````cpp
...
````
**Fix**: ...
````cpp
...
````

2.  **Title**: ...
````cpp
...
````
**Fix**: ...
````cpp
...
````
"""   
exampleRegex = re.compile(
    r"## Example \d+: (?P<title>[^\n]*)\s*"
    r"```cpp\s*(?P<codeSlow>[^`]*)```\s*"
    r"```cpp\s*(?P<codeFast>[^`]*)```\s*"
    r"Description: (?P<description>[^\n]*)\s*",
    flags=re.DOTALL
)


commentRegex = re.compile(r"\/\/[^\n]*")
stripComments = lambda s : re.sub(commentRegex, "", s)

includeRegex = re.compile(r"#include[^\n]*")  

def processCode(code):
    code = stripComments(code)
    includes = [s.strip() for s in re.findall(includeRegex, code)]
    mainInfo = findMainBody(code)
    
    mainBody = code[mainInfo["bodyStart"] : mainInfo["bodyEnd"]]
    mainBody = mainBody.replace("return 0;", "")
    mainBody = mainBody.strip()
    if mainBody == "": 
        logger.warning("mainBody is empty for snippet:")
        logger.warning(code)
    
    mainStart, mainEnd = (mainInfo["funcStart"], mainInfo["funcEnd"])
    codeStripped = code[:mainStart] + code[mainEnd:]
    codeStripped = re.sub(includeRegex, "", codeStripped)
    additionalDefs = codeStripped.strip()

    return {
        "code": code,
        "includes": includes,
        "mainBody": mainBody,
        "additionalDefs": additionalDefs
    }

starmap = lambda func, iterable: map(lambda val: func(*val), iterable)

def extractExamples():
    with open("examples.md", "r") as f:
        buffer = f.read()
    
    def processMatch(i, match):
        title = match.group("title")
        description = match.group("description")
        codeSlow = match.group("codeSlow")
        codeFast = match.group("codeFast")

        return {
            "_key" : str(i),
            "title": title,
            "description": description,
            "codeSlow" : processCode(codeSlow),
            "codeFast" : processCode(codeFast)
        }
    
    return starmap(
        processMatch,
        enumerate(exampleRegex.finditer(buffer), start=1)
    )

def insertExamples():
    examples = ArangoClient("http://localhost:8529").db().collection("code-optimization")
    examples.import_bulk(
        documents = list(extractExamples()),
        on_duplicate="update"
    )
        
if __name__ == "__main__":
    logging.basicConfig(stream=sys.stdout, level=logging.INFO)
    insertExamples()