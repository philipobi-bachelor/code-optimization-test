#!/usr/bin/env python3
from arango import ArangoClient
from benchmark import Benchmarker
import json

benchmarkTemplate = """\
#include "nanobench.h"
{includes}

{additionalDefs}

void benchmarkFunc() {{
    {benchmarkBody}
}}

int main() {{
    ankerl::nanobench::Bench benchmark;
    benchmark
    .output(nullptr)
    .epochs(15)
    .minEpochIterations(10)
    .minEpochTime(std::chrono::duration_cast<std::chrono::nanoseconds>(
        std::chrono::milliseconds(100)
    ));
    benchmark.run("test", []() {{benchmarkFunc();}});
    benchmark.render("{nanobenchOutputTemplate}", std::cerr);
}}
"""

nanobenchOutputTemplate = '{ {{#result}} \\"runtimeAvg\\": {{average(elapsed)}} {{/result}} }'

def benchmarkExample(benchmarker:Benchmarker, exampleCode):
    requiredIncludes = set(("#include <iostream>", "#include <chrono>"))
    includes = requiredIncludes | set(exampleCode["includes"])
    code = benchmarkTemplate.format(
        includes = "\n".join(includes),
        additionalDefs = exampleCode["additionalDefs"],
        benchmarkBody = exampleCode["mainBody"],
        nanobenchOutputTemplate = nanobenchOutputTemplate,
    )
    
    # discard output from stdout as it may be flooded by the benchmarked function
    output = benchmarker.runCode(code, stdout=False, stderr=True)
    output = output["stderr"]

    result = dict(compiled=False, executed=False, output=output, runtimeAvg=-1.)
    
    if "Compilation failed" in output: 
        print(code)
        return result
    result["compiled"]=True
    if "Execution failed" in output: return result
    result["executed"] = True
    
    try: 
        result["runtimeAvg"] = json.loads(output)["runtimeAvg"]
    except (json.JSONDecodeError, KeyError): pass
    return result
    

def processExample(benchmarker, example):
    _key = example["_key"]
    print(f"Processing example {_key}", end="\r")
    update = { "_key": _key }
    update["codeSlow"] = benchmarkExample(benchmarker, example["codeSlow"])
    update["codeFast"] = benchmarkExample(benchmarker, example["codeFast"])
    return update


def main():
    db = ArangoClient("http://localhost:8529").db()

    benchmarker = Benchmarker()

    cursor = db.aql.execute(
    """
    for example in `code-optimization` 
      sort to_number(example._key) asc
      return example
    """
    )
    
    updates = [processExample(benchmarker, example) for example in cursor]
    
    db.collection("code-optimization").update_many(updates)

def test():
    db = ArangoClient("http://localhost:8529").db()
    examples = db.collection("code-optimization")
    example = examples.get("20")
    benchmarker = Benchmarker()
    result = benchmarkExample(benchmarker, example["codeSlow"])
    print(result["output"])

if __name__=="__main__":
    main()