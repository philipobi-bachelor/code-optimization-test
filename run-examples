#!/usr/bin/env python3
from arango import ArangoClient
from benchmark import Benchmarker
import statistics
import json

benchmarkTemplate = """\
#include "nanobench.h"
{includes}

{additionalDefs}

void benchmarkFunc() {{
    {benchmarkBody}
}}

int main() {{
    ankerl::nanobench::Bench benchmark;
    benchmark.output(nullptr);
    benchmark.run("test", []() {{benchmarkFunc();}});
    benchmark.render(ankerl::nanobench::templates::pyperf(), std::cerr);
}}
"""

""" nanobench output:
{
    "benchmarks": [{"runs": [{"values": [float*]}]}],
    "metadata": {
    "loops": int,
    "inner_loops": int,
    "name": str,
    "unit": "second"
    },
    "version": str
}
"""


def benchmarkExample(benchmarker:Benchmarker, exampleCode):
    requiredIncludes = set(("#include <iostream>",))
    includes = requiredIncludes | set(exampleCode["includes"])
    code = benchmarkTemplate.format(
        includes = "\n".join(includes),
        additionalDefs = exampleCode["additionalDefs"],
        benchmarkBody = exampleCode["mainBody"]
    )
    
    # discard output from stdout as it may be flooded by the benchmarked function
    output = benchmarker.runCode(code, stdout=False, stderr=True)
    output = output["stderr"]

    result = dict(compiled=False, executed=False, output=output, runtimeAvg=-1.)
    
    if "Compilation failed" in output: 
        print(code)
        return result
    result["compiled"]=True
    if "Execution failed" in output: return result
    result["executed"] = True
    try: 
        data = json.loads(output)
        runtimes = data["benchmarks"][0]["runs"][0]["values"]
        result["runtimeAvg"] = statistics.mean(runtimes)
    except json.JSONDecodeError: pass
    
    return result

def processExample(benchmarker, example):
    _key = example["_key"]
    print(f"Processing example {_key}", end="\r")
    update = { "_key": _key }
    update["code"] = benchmarkExample(benchmarker, example["code"])
    update["codeFixed"] = benchmarkExample(benchmarker, example["codeFixed"])
    return update


def main():
    db = ArangoClient("http://localhost:8529").db()
    exampleCollection = db.collection("code-examples")

    benchmarker = Benchmarker()

    cursor = db.aql.execute(
    """
    for example in `code-examples` 
      sort to_number(example._key) asc
      return example
    """
    )
    
    updates = [processExample(benchmarker, example) for example in cursor]
    
    exampleCollection.update_many(updates)

if __name__=="__main__":
    main()